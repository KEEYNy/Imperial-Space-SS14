using Content.Client.Message;
using Content.Shared.Store;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Client.Graphics;
using Content.Shared.Actions.ActionTypes;
using System.Linq;
using Content.Shared.FixedPoint;

namespace Content.Client.Store.Ui;

[GenerateTypedNameReferences]
public sealed partial class StoreMenu : DefaultWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    private StoreWithdrawWindow? _withdrawWindow;
    // Imperial Space Start
    private StoreConfirmWindow? _confirmWindow;
    // Imperial Space End

    public event Action<BaseButton.ButtonEventArgs, ListingData>? OnListingButtonPressed;
    public event Action<BaseButton.ButtonEventArgs, string>? OnCategoryButtonPressed;
    public event Action<BaseButton.ButtonEventArgs, string, int>? OnWithdrawAttempt;

    public Dictionary<string, FixedPoint2> Balance = new();
    public string CurrentCategory = string.Empty;

    public StoreMenu(string name)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        WithdrawButton.OnButtonDown += OnWithdrawButtonDown;
        if (Window != null)
            Window.Title = name;
    }

    public void UpdateBalance(Dictionary<string, FixedPoint2> balance)
    {
        Balance = balance;

        var currency = balance.ToDictionary(type =>
            (type.Key, type.Value), type => _prototypeManager.Index<CurrencyPrototype>(type.Key));

        // Imperial Space Start
        var balanceStr = Loc.GetString("store-ui-balance") + " ";
        foreach (var ((type, amount),proto) in currency)
        {
            balanceStr += Loc.GetString(
                "store-ui-balance-display",
                ("amount", amount),
                ("currency", Loc.GetString(
                        proto.CurrencySymbol != string.Empty
                        ? proto.CurrencySymbol
                        : " " + Loc.GetString(proto.DisplayName),
                    ("amount", 1))));
        }
        // Imperial Space End

        BalanceInfo.SetMarkup(balanceStr.TrimEnd());

        var disabled = true;
        foreach (var type in currency)
        {
            if (type.Value.CanWithdraw && type.Value.Cash != null && type.Key.Item2 > 0)
                disabled = false;
        }

        WithdrawButton.Disabled = disabled;
    }

    public void UpdateListing(List<ListingData> listings, bool canBuyByBankAccount)
    {
        var sorted = listings.OrderBy(l => l.Priority).ThenBy(l => l.Cost.Values.Sum());

        // should probably chunk these out instead. to-do if this clogs the internet tubes.
        // maybe read clients prototypes instead?
        ClearListings();
        foreach (var item in sorted)
        {
            // Imperial Space Start
            AddListingGui(item, canBuyByBankAccount);
            // Imperial Space End
        }
    }

    private void OnWithdrawButtonDown(BaseButton.ButtonEventArgs args)
    {
        // check if window is already open
        if (_withdrawWindow != null && _withdrawWindow.IsOpen)
        {
            _withdrawWindow.MoveToFront();
            return;
        }

        // open a new one
        _withdrawWindow = new StoreWithdrawWindow();
        _withdrawWindow.OpenCentered();

        _withdrawWindow.CreateCurrencyButtons(Balance);
        _withdrawWindow.OnWithdrawAttempt += OnWithdrawAttempt;
    }

    private void AddListingGui(ListingData listing, bool canBuyByBankAccount)
    {
        if (!listing.Categories.Contains(CurrentCategory))
            return;

        var listingName = Loc.GetString(listing.Name);
        var listingDesc = Loc.GetString(listing.Description);
        var listingPrice = listing.Cost;
        var canBuy = CanBuyListing(Balance, listingPrice);

        var spriteSys = _entityManager.EntitySysManager.GetEntitySystem<SpriteSystem>();

        Texture? texture = null;
        if (listing.Icon != null)
            texture = spriteSys.Frame0(listing.Icon);

        if (listing.ProductEntity != null)
        {
            if (texture == null)
                texture = spriteSys.GetPrototypeIcon(listing.ProductEntity).Default;

            var proto = _prototypeManager.Index<EntityPrototype>(listing.ProductEntity);
            if (listingName == string.Empty)
                listingName = proto.Name;
            if (listingDesc == string.Empty)
                listingDesc = proto.Description;
        }
        else if (listing.ProductAction != null)
        {
            var action = _prototypeManager.Index<InstantActionPrototype>(listing.ProductAction);
            if (action.Icon != null)
                texture = spriteSys.Frame0(action.Icon);
        }

        var newListing = new StoreListingControl(listingName, listingDesc, GetListingPriceString(listing), canBuy, texture);
        // Imperial Space Start
        if (canBuyByBankAccount)
        {
            newListing.StoreItemBuyButton.OnButtonDown += args => OpenConfirmWindow(args, listing);
        }
        else
        {
            newListing.StoreItemBuyButton.OnButtonDown += args => OnListingButtonPressed?.Invoke(args, listing);
        }
        // Imperial Space End

        StoreListingsContainer.AddChild(newListing);
    }

    // Imperial Space Start
    private void OpenConfirmWindow(BaseButton.ButtonEventArgs args, ListingData listing)
    {
        if (_confirmWindow != null && _confirmWindow.IsOpen)
        {
            _confirmWindow.MoveToFront();
            return;
        }

        _confirmWindow = new StoreConfirmWindow();
        _confirmWindow.OpenCentered();

        _confirmWindow.ConfirmButton.OnButtonDown += _args => OnListingButtonPressed?.Invoke(_args, listing);
    }
    // Imperial Space End

    public bool CanBuyListing(Dictionary<string, FixedPoint2> currency, Dictionary<string, FixedPoint2> price)
    {
        foreach (var type in price)
        {
            if (!currency.ContainsKey(type.Key))
                return false;

            //if (currency[type.Key] < type.Value)
            //    return false;
        }
        return true;
    }

    public string GetListingPriceString(ListingData listing)
    {
        var text = string.Empty;

        if (listing.Cost.Count < 1)
            text = Loc.GetString("store-currency-free");
        else
        {
            foreach (var (type, amount) in listing.Cost)
            {
                var currency = _prototypeManager.Index<CurrencyPrototype>(type);
                // Imperial Space Start
                text += Loc.GetString("store-ui-price-display", ("amount", amount),
                    ("currency", Loc.GetString(
                            currency.CurrencySymbol != string.Empty
                            ? currency.CurrencySymbol
                            : " " + Loc.GetString(currency.DisplayName),
                        ("amount", amount))));
                // Imperial Space End
            }
        }

        return text.TrimEnd();
    }

    private void ClearListings()
    {
        StoreListingsContainer.Children.Clear();
    }

    public void PopulateStoreCategoryButtons(HashSet<ListingData> listings)
    {
        var allCategories = new List<StoreCategoryPrototype>();
        foreach (var listing in listings)
        {
            foreach (var cat in listing.Categories)
            {
                var proto = _prototypeManager.Index<StoreCategoryPrototype>(cat);
                if (!allCategories.Contains(proto))
                    allCategories.Add(proto);
            }
        }

        allCategories = allCategories.OrderBy(c => c.Priority).ToList();

        if (CurrentCategory == string.Empty && allCategories.Count > 0)
            CurrentCategory = allCategories.First().ID;

        if (allCategories.Count <= 1)
            return;

        CategoryListContainer.Children.Clear();

        foreach (var proto in allCategories)
        {
            var catButton = new StoreCategoryButton
            {
                Text = Loc.GetString(proto.Name),
                Id = proto.ID
            };

            catButton.OnPressed += args => OnCategoryButtonPressed?.Invoke(args, catButton.Id);
            CategoryListContainer.AddChild(catButton);
        }
    }

    public override void Close()
    {
        base.Close();
        _withdrawWindow?.Close();
        // Imperial Space Start
        _confirmWindow?.Close();
        // Imperial Space End
    }

    private sealed class StoreCategoryButton : Button
    {
        public string? Id;
    }
}
